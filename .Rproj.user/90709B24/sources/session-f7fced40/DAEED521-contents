---
title: "final_exam"
author: "Srivastav Budugutta"
date: "2023-04-20"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r}
rm(list = ls())
library(caTools)
library(tidyverse)
library(vtreat)
library(mice)
library(xgboost); library(caret)
library(randomForest)
library(mgcv)
library(car)
library(rpart)
library(rpart.plot)
library(ISLR2)
library(ROCR)
library(gbm)
library(ranger)
library(pROC)
library(e1071)
library(gam)
library(mgcv)
library(ISLR)
library(caret)
library(caTools)
library(car)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(leaps)
library(glmnet)
library(dplyr)
```

#Q1

```{r}

data = read_csv("data/version1.csv")
head(data)



```


#Q2

```{r}

set.seed(617)
split = sample(1:nrow(data), nrow(data)*0.80)
train = data[split,]
test = data[-split,]
nrow(train)
```

#Q4

```{r}
class("city")


```


#Q6
```{r}
train %>% filter(beds == 4) %>% count()

```

#Q8

```{r}

count_of_rooms = sum(train$city == "SACRAMENTO")
percentage_home = (count_of_rooms / nrow(train)) * 100
percentage_home

```


#Q10
```{r}
train %>% filter(sqft>=1000) %>% filter(baths >=2) %>% summarize(median_price = median(price))



```


#Q12
```{r}
bin1 = train %>% filter(sqft <=1000) %>% count()
bin2 = train %>% filter(sqft >1000 & sqft <=2000) %>% count()
bin3 = train %>% filter(sqft >2000 & sqft <=3000) %>% count()
bin4 = train %>% filter(sqft >3000 & sqft <=4000) %>% count()
bin5 = train %>% filter(sqft > 4000) %>% count()

bin1
bin2
bin3
bin4
bin5


```


#Q14
```{r}
train$condition = parse_number(train$condition)
train %>% group_by(city) %>% filter(city %in% c("ANTELOPE", "CITRUS_HEIGHTS", "ELK_GROVE", "ROSEVILLE","SACRAMENTO")) %>% summarize(mean_rating = mean(condition)) %>% arrange(mean_rating)

```


#Q16
```{r}

ggplot(mapping = aes(x=train$sqft, y=train$price))+
  geom_point(color = "red")  +
  geom_smooth(method = "lm", se = F, color = "green")
```


#Q18
```{r}
model1 = lm(train$price~train$beds, data = train)
summary(model1)
```


#Q20
```{r}

model2 = lm(price~type, data = train)
summary(model2)
```


#Q22
```{r}
model3 = lm(price~beds+baths+sqft+type+latitude+longitude, data = train)
summary(model3)$r.squared


```


#Q24
```{r}
summary(model3)
#based on the p value I have determined the statistical significance

```


#Q26
```{r}

model3_predictor = names(model3$coefficients)[-1][which.max(abs(model3$coefficients[-1]))]
model3_predictor


```


#Q28
```{r}

model4 = gam(price~beds+baths+s(sqft)+type+s(latitude)+s(longitude), data = train, method = 'REML')
pred = predict(model4, newdata = test)
rmse = sqrt(mean((pred-test$price)^2))
rmse


```


#Q30


```{r}

model5 = lm(price~beds+baths+sqft+latitude+longitude, data = train)
summary(model5)
vif_values = vif(model5)
vif_values
which.max(vif_values)
```


#Q32


```{r}

start_mod = lm(price~1,data=train)
empty_mod = lm(price~1,data=train)
hybridStepwise = step(start_mod,
                      scope=list(upper=model5,lower=empty_mod),
                      direction='both',
                      alpha = 0.1)
hybridStepwise$anova

```

#Q34


```{r}


model6 = rpart(price~beds+baths+sqft+type+latitude+longitude, data = train)
summary_model6 = summary(model6)
summary_model6$variable.importance

```

#Q36


```{r}
model6_pred = predict(model6, newdata = data.frame(sqft=1000, beds=2, baths=2, latitude=38.5, longitude=-120.5,type="Condo"), type='vector')
model6_pred
```

#Q38


```{r}

model6_pred = predict(model6, newdata = data.frame(sqft=2500, beds=4, baths=3, latitude=38.5, longitude=-120,type="Residential"), type='vector')
model6_pred

```

#Q40


```{r}
tail(predict(model6, newdata= train),n=1)
```


#Q42


```{r}


set.seed(617)

model7 = gbm(price~beds+baths+sqft+latitude+longitude,n.trees = 200, distribution = "gaussian", interaction.depth = 3, shrinkage = 0.049, n.minobsinnode = 5, data = train)

model7_pred =  predict(model7, newdata = test)


model7_rmse = sqrt(mean((model7_pred - test$price)^2))

model7_rmse


```


#Q44


```{r}

set.seed(617)

model8 = ranger(price ~ beds + baths + sqft + type + latitude + longitude, data = train, num.trees = 400)
model8_pred = predict(model8, data = test)
model8_rmse = sqrt(mean((model8_pred$predictions-test$price)^2))
model8_rmse

model3_predict = predict(model3, newdata = test)
model3_rmse = sqrt(mean((model3_predict-test$price)^2))

model4_predict = predict(model4, newdata = test)
model4_rmse = sqrt(mean((model4_predict-test$price)^2))

model6_predict = predict(model6, newdata = test)
model6_rmse = sqrt(mean((model6_predict-test$price)^2))

model3_rmse
model4_rmse
model6_rmse
model7_rmse
model8_rmse


```

#Q46


```{r}

model9 = glm(price_hilo ~ beds + baths + sqft + type + latitude + longitude, data = train, family = "binomial")
model9_predict  =  predict(model9, newdata = data.frame(beds = 2, baths = 2, sqft = 1000, type = "Condo", latitude = 38.5, longitude = -120.5), type = "response")
model9_predict

```


#Q48


```{r}

model9$coefficients
model9_likelihood = 100 * (exp(model9$coefficients["sqft"])-1)
model9_likelihood
```

#Q50


```{r}
model9$aic
```


#Q52


```{r}
model9_predict = predict(model9, newdata = test, type = 'response')
ct = table(price_hilo = test$price_hilo,
           predictions = as.integer(model9_predict>0.5)); ct

accuracy = sum(ct[1,1],ct[2,2])/nrow(test); accuracy

```


#Q54


```{r}
model9_auc =  roc(test$price_hilo, as.numeric(predict(model9, type="response", newdata = test)>0.5))$auc
model9_auc
```


#Q56


```{r}
model10 = svm(factor(train$price_hilo)~beds+baths+sqft+type+latitude+longitude,data = train, kernel='radial',scale=F,type='C-classification')

pred = predict(model10)
mean(pred==train$y)

model10_pred = predict(model10,newdata=test)
# pred
# mean(pred==test$price_hilo)
test$price_hilo = factor(test$price_hilo)
ct = table(price_hilo = test$price_hilo,
           predictions = model10_pred); ct

accuracy = sum(ct[1,1],ct[2,2])/nrow(test); accuracy
```


#Q58


```{r}
ct = table(price_hilo = test$price_hilo,
predictions = model10_pred); ct

```
